name: check_dependency_updates

on:
  schedule:
    - cron: '0 0 15 */2 *'
  workflow_dispatch:

jobs:
  update_dependencies:
    runs-on: ubuntu-latest
    steps:
      # MARK: Environments

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node Environment
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack and Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.6.0 --activate

      - name: Install Yarn
        working-directory: ./frontend
        run: yarn install

      # MARK: Dependency Updates

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Update Backend Dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade uv
          uv venv
          uv pip install -r requirements-dev.txt
          pip list --outdated | awk '{print $1}' | tail -n +3 | xargs -n1 pip install -U
          pip freeze > requirements-dev.txt
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update Frontend Dependencies
        working-directory: frontend
        run: |
          ncu -u

      # MARK: Backend Tests

      - name: Run Ruff Format - Formatting and Linting Check
        run: ruff check ./backend || echo "Ruff check failed" >> error_log.txt

      - name: Run mypy - Static Type Checking
        if: always()
        run: mypy ./backend --config-file ./backend/pyproject.toml || echo "mypy check failed" >> error_log.txt

      - name: Run pytest - Unit Tests
        if: always()
        run: pytest ./backend -vv || echo "Backend tests failed." >> error_log.txt

      # MARK: Frontend Tests

      - name: Install Prettier
        working-directory: ./frontend
        run: yarn add prettier

      - name: Run Prettier - Formatting Check
        working-directory: ./frontend
        run: |
          yarn prettier . --check --config ../.prettierrc --ignore-path ../.prettierignore || echo "Prettier check failed." >> error_log.txt

      - name: Run Nuxt Type Check
        if: always()
        working-directory: ./frontend
        run: nuxi typecheck || echo "Type check failed." >> error_log.txt

      - name: Run ESLint - Linting
        if: always()
        working-directory: ./frontend
        run: echo "ESLint check failed." >> error_log.txt

      - name: Install
        run: install

      # MARK: Errors and Issue

      - name: Log Errors
        if: failure()
        run: |
          if [[ -f error_log.txt ]]; then
            cat error_log.txt
          else
            echo "No errors found during dependency update."
          fi

      - name: Set Issue Title
        run: echo "TITLE=Dependency Update Errors - $(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Create GitHub Issue
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: ${{ env.Title }}
          content-filepath: error_log.txt
          labels: |
            dependencies
            help wanted
